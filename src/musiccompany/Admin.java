/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package musiccompany;

import java.awt.Toolkit;
import java.awt.event.WindowEvent;
import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import java.sql.DriverManager;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import static musiccompany.AlbumsTable.dbConnection;
import static musiccompany.AlbumsTable.prestatement;
import static musiccompany.AlbumsTable.prestatement1;
import static musiccompany.AlbumsTable.result;
import static musiccompany.Home.driverClassName;
import static musiccompany.Home.passwd;
import static musiccompany.Home.url;
import static musiccompany.Home.username;

/**
 *
 * @author troka
 */
public class Admin extends javax.swing.JFrame {

    private static final String SQL_INSERT = "INSERT INTO SONGS (SONG_NAME , ARTIST_NAME, ALBUM_NAME, SALES, PRICES) VALUES (?,?,?,?,?)";

    /**
     * Creates new form Admin
     */
    public Admin() throws SQLException {
        initComponents();
        myConnection();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtsong = new javax.swing.JTextField();
        txtartist = new javax.swing.JTextField();
        txtalbum = new javax.swing.JTextField();
        txtsales = new javax.swing.JTextField();
        txtprice = new javax.swing.JTextField();
        btnUpdate = new javax.swing.JButton();
        btnAddSong = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        txtartisto = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        txtalbumso = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtconcertso = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        btnAddArtist = new javax.swing.JButton();
        btnDeleteArtist = new javax.swing.JButton();
        jButtonExit = new javax.swing.JButton();
        jButtonReset = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txtartista = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txtalbuma = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        txttracklist = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        txtsalesa = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        txtpricea = new javax.swing.JTextField();
        btnUpdateAlbum = new javax.swing.JButton();
        btnHome = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Admin Panel");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Song", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dubai", 1, 24))); // NOI18N
        jPanel1.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        jLabel2.setText("Song");

        jLabel3.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        jLabel3.setText("Artist");

        jLabel4.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        jLabel4.setText("Album");

        jLabel5.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        jLabel5.setText("Sales");

        jLabel6.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        jLabel6.setText("Price");

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnAddSong.setText("Add ");
        btnAddSong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddSongActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtsales)
                            .addComponent(txtartist)
                            .addComponent(txtsong)
                            .addComponent(txtalbum)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(txtprice))
                        .addGap(118, 118, 118))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnAddSong)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnUpdate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDelete)
                        .addGap(57, 57, 57))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtsong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtartist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtalbum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtsales, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtprice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpdate)
                    .addComponent(btnAddSong)
                    .addComponent(btnDelete))
                .addContainerGap())
        );

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "Song", "Artist", "Album", "Sales", "Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Artist", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dubai", 1, 24))); // NOI18N
        jPanel2.setToolTipText("");

        txtartisto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtartistoActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        jLabel1.setText("Artist");

        txtalbumso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtalbumsoActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        jLabel7.setText("Albums");

        jLabel8.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        jLabel8.setText("Concerts");

        btnAddArtist.setText("Add ");
        btnAddArtist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddArtistActionPerformed(evt);
            }
        });

        btnDeleteArtist.setText("Delete");
        btnDeleteArtist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteArtistActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtartisto)
                    .addComponent(txtalbumso)
                    .addComponent(txtconcertso)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(0, 64, Short.MAX_VALUE)
                        .addComponent(btnAddArtist)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDeleteArtist)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtartisto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtalbumso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtconcertso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddArtist)
                    .addComponent(btnDeleteArtist))
                .addContainerGap())
        );

        jButtonExit.setText("Exit");
        jButtonExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExitActionPerformed(evt);
            }
        });

        jButtonReset.setText("Reset");
        jButtonReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonResetActionPerformed(evt);
            }
        });

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "Artists", "Album", "Tracklist", "Sales", "Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable3MouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jTable3);
        if (jTable3.getColumnModel().getColumnCount() > 0) {
            jTable3.getColumnModel().getColumn(3).setResizable(false);
            jTable3.getColumnModel().getColumn(4).setResizable(false);
            jTable3.getColumnModel().getColumn(5).setResizable(false);
        }

        jButton1.setText("Total Sales");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Album", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dubai", 1, 24))); // NOI18N

        jLabel10.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        jLabel10.setText("Artist");

        txtartista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtartistaActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        jLabel11.setText("Album");

        jLabel12.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        jLabel12.setText("Tracklist");

        jLabel13.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        jLabel13.setText("Sales");

        jLabel14.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        jLabel14.setText("Price");

        btnUpdateAlbum.setText("Update");
        btnUpdateAlbum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateAlbumActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtartista)
                    .addComponent(txtalbuma)
                    .addComponent(txttracklist)
                    .addComponent(txtsalesa)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(jLabel10)
                            .addComponent(jLabel11)
                            .addComponent(jLabel12)
                            .addComponent(jLabel13)
                            .addComponent(jLabel14))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(txtpricea)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGap(0, 115, Short.MAX_VALUE)
                        .addComponent(btnUpdateAlbum)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9)
                .addGap(18, 18, 18)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtartista, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtalbuma, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txttracklist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtsalesa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel14)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtpricea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnUpdateAlbum)
                .addContainerGap())
        );

        btnHome.setText("Home");
        btnHome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHomeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 69, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnHome)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonReset)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonExit))
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane3))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonExit)
                            .addComponent(jButtonReset)
                            .addComponent(jButton1)
                            .addComponent(btnHome))))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddSongActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddSongActionPerformed
        
        
        try {
        
            
            boolean songExists = false;
            
            String selectId = "select * from selectid()";
            dbConnection = DriverManager.getConnection(url,username,passwd);
            statement = dbConnection.createStatement();
            result = statement.executeQuery(selectId);
            
            int id = 0;
            
           while (result.next()) {
                id = result.getInt("id");
            }
           
            int albumid = 0;
            String selectalbumId = "select * from selectallalbums()";
            dbConnection = DriverManager.getConnection(url,username,passwd);
            statement = dbConnection.createStatement();
            result = statement.executeQuery(selectalbumId);
           
            while (result.next()) {
                albumid = result.getInt("id");
            }
           
            //CHECK IF SONG EXISTS
           String songname =  txtsong.getText();
           String artistname = txtartist.getText();
           
           statement = dbConnection.createStatement();
           result = statement.executeQuery("select * from selectallsongs()");
           while(result.next()){
               String songfromlist = result.getString("song_name");
               String artistn = result.getString("artist_name");
               if(songfromlist.compareTo(songname) == 0 && artistn.compareTo(artistname) == 0){
                   songExists = true;
                   
               }
           }
           
           String albumname = txtalbum.getText();
           
           boolean albumExists = false;
           int tracklist = 0;
           statement = dbConnection.createStatement();
           result = statement.executeQuery("select * from selectallalbums()");
           while(result.next()){
               String albumfromlist = result.getString("album_name");
               String artistn = result.getString("artist_name");
               if(albumfromlist.compareTo(albumname) == 0 && artistn.compareTo(artistname) == 0){
                   albumExists = true;
                   tracklist = result.getInt("tracklist");
               }
           }
           

          
           DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
           int selectedRows =jTable1.getSelectedRow();
           
           
           
           
           if(songExists){
               JOptionPane.showMessageDialog(this, "This song already exists");
               
               return;
           }else{
               
               if(albumExists){
                String updatealbum = "update albums set tracklist = ? where id = ?";
                prestatement = dbConnection.prepareStatement(updatealbum);
                prestatement.setInt(1, tracklist+1);
                prestatement.setInt(2, albumid);
                prestatement.executeUpdate();
               }else{
                   String insertalbum = "insert into albums(id,artist_name,album_name,tracklist,sales,price)values(?,?,?,?,?,?)";
                   prestatement = dbConnection.prepareStatement(insertalbum);
                    prestatement.setInt(1,albumid+1);
                    prestatement.setString(2, txtartist.getText());
                    prestatement.setString(3, txtalbum.getText());
                    prestatement.setInt(4, 1);
                    prestatement.setInt(5, 0);
                    prestatement.setFloat(6, 0);
                    prestatement.executeUpdate();
                }
                int sales = Integer.valueOf(txtsales.getText());
                float price = Float.valueOf(txtprice.getText());
                Class.forName(driverClassName);
                dbConnection = DriverManager.getConnection(url, username, passwd);
                String insertSong = "insert into songs(id,artist_name,album_name,song_name,sales,price)values(?,?,?,?,?,?)";
                prestatement = dbConnection.prepareStatement(insertSong);

                prestatement.setInt(1,id+1);
                prestatement.setString(2, txtartist.getText());
                prestatement.setString(3, txtalbum.getText());
                prestatement.setString(4, txtsong.getText());
                prestatement.setInt(5, sales);
                prestatement.setFloat(6, price);
                prestatement.executeUpdate();
                myConnection();
                
                String insertsales = "insert into sales(artist_name,sales)values(?,?)";
                prestatement = dbConnection.prepareStatement(insertsales);
                
                prestatement.setString(1, txtartist.getText());
                prestatement.setInt(2, sales);
                
                
                
                
           }
 

            JOptionPane.showMessageDialog(this, "Song Added");

        } catch (SQLException ex) {
            Logger.getLogger(Admin.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Admin.class.getName()).log(Level.SEVERE, null, ex);
        }

        try ( Connection conn = DriverManager.getConnection("jdbc:postgresql://dblabs.it.teithe.gr:5432/it164840", "it164840", "123456");  PreparedStatement preparedStatement = conn.prepareStatement(SQL_INSERT)) {

        } catch (SQLException ex) {
            Logger.getLogger(Admin.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_btnAddSongActionPerformed

    private void btnAddArtistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddArtistActionPerformed
         try {
            int albums = Integer.valueOf(txtalbumso.getText());
            int concerts = Integer.valueOf(txtconcertso.getText());
            
            

            Class.forName(driverClassName);
            dbConnection = DriverManager.getConnection(url, username, passwd);
            String insertArtist = "insert into artists(artist_name,albums,concerts)values(?,?,?)";
            prestatement = dbConnection.prepareStatement(insertArtist);
            
            prestatement.setString(1, txtartisto.getText());
            prestatement.setInt(2, albums);
            prestatement.setInt(3, concerts);
            prestatement.executeUpdate();
            myConnection();
            
             JOptionPane.showMessageDialog(this, "Artist Added");
            
            
            } catch (SQLException ex) {
            Logger.getLogger(Admin.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Admin.class.getName()).log(Level.SEVERE, null, ex);
        }

        try ( Connection conn = DriverManager.getConnection("jdbc:postgresql://dblabs.it.teithe.gr:5432/it164840", "it164840", "123456");  PreparedStatement preparedStatement = conn.prepareStatement(SQL_INSERT)) {

        } catch (SQLException ex) {
            Logger.getLogger(Admin.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnAddArtistActionPerformed

    private void txtartistoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtartistoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtartistoActionPerformed

    private void txtalbumsoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtalbumsoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtalbumsoActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        
        
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        int selectedRows = jTable1.getSelectedRow();
        
        try {
        
            
            
            int id = Integer.parseInt(model.getValueAt(selectedRows,0).toString());
            int sales = Integer.valueOf(txtsales.getText());
            float price = Float.valueOf(txtprice.getText());
            Class.forName(driverClassName);
            dbConnection = DriverManager.getConnection(url, username, passwd);
            String insertSong = "update songs set artist_name = ? ,album_name = ?,"
                   +"song_name = ?, sales = ? , price = ? where id = ?";
            prestatement = dbConnection.prepareStatement(insertSong);
           
            prestatement.setString(1, txtartist.getText());
            prestatement.setString(2, txtalbum.getText());
            prestatement.setString(3, txtsong.getText());
            prestatement.setInt(4, sales);
            prestatement.setFloat(5, price);
            prestatement.setInt(6, id);
            prestatement.executeUpdate();
 

            JOptionPane.showMessageDialog(this, "Song Updated");
              myConnection();

        } catch (SQLException ex) {
            Logger.getLogger(Admin.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Admin.class.getName()).log(Level.SEVERE, null, ex);
        }

        try ( Connection conn = DriverManager.getConnection("jdbc:postgresql://dblabs.it.teithe.gr:5432/it164840", "it164840", "123456");  PreparedStatement preparedStatement = conn.prepareStatement(SQL_INSERT)) {

        } catch (SQLException ex) {
            Logger.getLogger(Admin.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
    }//GEN-LAST:event_btnUpdateActionPerformed

    private JFrame frame;
    private void jButtonExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExitActionPerformed
        frame = new JFrame("Exit");
        if (JOptionPane.showConfirmDialog(frame, "Any unsaved changes will be lost. Are you sure you want to exit?","Exit",
                JOptionPane.YES_NO_OPTION)==JOptionPane.YES_OPTION)
        {
            System.exit(0);
        }
            
        
            
        
    }//GEN-LAST:event_jButtonExitActionPerformed

    private void jButtonResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonResetActionPerformed
        txtsong.setText("");
        txtartist.setText("");
        txtalbum.setText("");
        txtsales.setText("");
        txtprice.setText("");
        txtartisto.setText("");
        txtalbumso.setText("");
        txtconcertso.setText(""); 
        txtartista.setText(""); 
        txtalbuma.setText(""); 
        txttracklist.setText(""); 
        txtsalesa.setText(""); 
        txtpricea.setText(""); 
        
    }//GEN-LAST:event_jButtonResetActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        int selectedRows = jTable1.getSelectedRow();
        
        txtsong.setText(model.getValueAt(selectedRows,1).toString());
        txtartist.setText(model.getValueAt(selectedRows,2).toString());
        txtalbum.setText(model.getValueAt(selectedRows,3).toString());
        txtsales.setText(model.getValueAt(selectedRows,4).toString());
        txtprice.setText(model.getValueAt(selectedRows,5).toString());
        txtartisto.setText(model.getValueAt(selectedRows,2).toString());
        
        
    }//GEN-LAST:event_jTable1MouseClicked

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        int selectedRows = jTable1.getSelectedRow();
        
        
        try {
        
            
            
            int id = Integer.parseInt(model.getValueAt(selectedRows,0).toString());
            
            int dialogRslt = JOptionPane.showConfirmDialog(null,"Do you want to Delete the Song?","Warning",JOptionPane.YES_NO_OPTION);
            
            if(dialogRslt== JOptionPane.YES_OPTION){
                
                     
            Class.forName(driverClassName);
            dbConnection = DriverManager.getConnection(url, username, passwd);
            String getAlbum = "select album_name from songs where id = ?";
            
            prestatement1 = dbConnection.prepareStatement(getAlbum);
            prestatement1.setInt(1, id);
            result = prestatement1.executeQuery();
            String album = null;
            while(result.next()){
                album = result.getString("album_name");
            }
            
            String insertSong = "delete from songs where id = ?";
            
            prestatement = dbConnection.prepareStatement(insertSong);
        
            prestatement.setInt(1,id);
            prestatement.executeUpdate();
            
            String getTracklist = "select tracklist from albums where album_name = ?";
            prestatement1 = dbConnection.prepareStatement(getTracklist);
            prestatement1.setString(1, album);
            result = prestatement1.executeQuery();
            
            int tracklist = 0;
            while(result.next()){
                tracklist = result.getInt("tracklist");
            }
            
            String updateAlbum = "UPDATE albums set tracklist = ? where album_name = ?";
            prestatement = dbConnection.prepareStatement(insertSong);
        
            prestatement.setInt(1,id);
            prestatement1 = dbConnection.prepareStatement(updateAlbum);
            prestatement1.setInt(1, tracklist-1);
            prestatement1.setString(2, album);
            prestatement1.executeUpdate();
 

            JOptionPane.showMessageDialog(this, "Song Deleted");
              myConnection();

            
        }

        } catch (SQLException ex) {
            Logger.getLogger(Admin.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Admin.class.getName()).log(Level.SEVERE, null, ex);
        }

        try ( Connection conn = DriverManager.getConnection("jdbc:postgresql://dblabs.it.teithe.gr:5432/it164840", "it164840", "123456");  PreparedStatement preparedStatement = conn.prepareStatement(SQL_INSERT)) {

        } catch (SQLException ex) {
            Logger.getLogger(Admin.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnDeleteArtistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteArtistActionPerformed
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        int selectedRows = jTable1.getSelectedRow();
        
        
        try {
        
            
            
            int id = Integer.parseInt(model.getValueAt(selectedRows,0).toString());
            
            int dialogRslt = JOptionPane.showConfirmDialog(null,"Do you want to Delete the artist?","Warning",JOptionPane.YES_NO_OPTION);
            
            if(dialogRslt== JOptionPane.YES_OPTION){
                
                     
            Class.forName(driverClassName);
            dbConnection = DriverManager.getConnection(url, username, passwd);
            String deleteartistfromsongs = "delete from songs where artist_name = ?";
            String deleteartistfromalbums = "delete from albums where artist_name = ?";
            String deleteartistfromartists = "delete from artists where artist_name = ?";
            prestatement = dbConnection.prepareStatement(deleteartistfromsongs);
            
            prestatement.setString(1,txtartist.getText());
            prestatement.executeUpdate();
            prestatement = dbConnection.prepareStatement(deleteartistfromalbums);
            
            prestatement.setString(1,txtartist.getText());
            prestatement.executeUpdate();
                        prestatement = dbConnection.prepareStatement(deleteartistfromartists);
            
            prestatement.setString(1,txtartist.getText());
            prestatement.executeUpdate();
 

            JOptionPane.showMessageDialog(this, "Artist Deleted");
              myConnection();

            
        }

        } catch (SQLException ex) {
            Logger.getLogger(Admin.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Admin.class.getName()).log(Level.SEVERE, null, ex);
        }

        try ( Connection conn = DriverManager.getConnection("jdbc:postgresql://dblabs.it.teithe.gr:5432/it164840", "it164840", "123456");  PreparedStatement preparedStatement = conn.prepareStatement(SQL_INSERT)) {

        } catch (SQLException ex) {
            Logger.getLogger(Admin.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnDeleteArtistActionPerformed

    private void jTable3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable3MouseClicked
        DefaultTableModel model = (DefaultTableModel) jTable3.getModel();
        int selectedRows = jTable3.getSelectedRow();
        
//        txtsong.setText(model.getValueAt(selectedRows,1).toString());
        txtartist.setText(model.getValueAt(selectedRows,1).toString());
        txtalbum.setText(model.getValueAt(selectedRows,2).toString());
//        txtsales.setText(model.getValueAt(selectedRows,4).toString());
//        txtprice.setText(model.getValueAt(selectedRows,5).toString());
        txtartisto.setText(model.getValueAt(selectedRows,1).toString());
        txtartista.setText(model.getValueAt(selectedRows,1).toString());
        txtalbuma.setText(model.getValueAt(selectedRows,2).toString());
        txtalbumso.setText(model.getValueAt(selectedRows,2).toString());
        
        txttracklist.setText(model.getValueAt(selectedRows,3).toString());
        txtsalesa.setText(model.getValueAt(selectedRows,4).toString());
        txtpricea.setText(model.getValueAt(selectedRows,5).toString());
        
    }//GEN-LAST:event_jTable3MouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        close();
        TotalSalesTable sales = null;
        try {
            sales = new TotalSalesTable();
        } catch (SQLException ex) {
            Logger.getLogger(Admin.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Admin.class.getName()).log(Level.SEVERE, null, ex);
        }
        sales.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void txtartistaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtartistaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtartistaActionPerformed

    private void btnUpdateAlbumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateAlbumActionPerformed
       
        
        DefaultTableModel model = (DefaultTableModel) jTable3.getModel();
        int selectedRows = jTable3.getSelectedRow();
        
        try {
        
            
            
            int id = Integer.parseInt(model.getValueAt(selectedRows,0).toString());
            int tracklist = Integer.valueOf(txttracklist.getText());
            int sales1 = Integer.valueOf(txtsales.getText());
            float price1 = Float.valueOf(txtprice.getText());
            Class.forName(driverClassName);
            dbConnection = DriverManager.getConnection(url, username, passwd);
            String updateAlbum = "update albums set artist_name = ? , album_name = ?,"
                   +"tracklist = ?, sales = ? , price = ? where id = ?";
            prestatement = dbConnection.prepareStatement(updateAlbum);
           
            prestatement.setString(1, txtartista.getText());
            prestatement.setString(2, txtalbuma.getText());
            prestatement.setInt(3, tracklist);
            prestatement.setInt(4, sales1);
            prestatement.setFloat(5, price1);
            prestatement.setInt(6,id);
            prestatement.executeUpdate();
 

            JOptionPane.showMessageDialog(this, "Album Updated");
              myConnection();

        } catch (SQLException ex) {
            Logger.getLogger(Admin.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Admin.class.getName()).log(Level.SEVERE, null, ex);
        }

        try ( Connection conn = DriverManager.getConnection("jdbc:postgresql://dblabs.it.teithe.gr:5432/it164840", "it164840", "123456");  PreparedStatement preparedStatement = conn.prepareStatement(SQL_INSERT)) {

        } catch (SQLException ex) {
            Logger.getLogger(Admin.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnUpdateAlbumActionPerformed

    private void btnHomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHomeActionPerformed
             close();
        Home home = new Home();
        home.setVisible(true); 
    }//GEN-LAST:event_btnHomeActionPerformed

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Admin().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(Admin.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddArtist;
    private javax.swing.JButton btnAddSong;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnDeleteArtist;
    private javax.swing.JButton btnHome;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton btnUpdateAlbum;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonExit;
    private javax.swing.JButton jButtonReset;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable3;
    private javax.swing.JTextField txtalbum;
    private javax.swing.JTextField txtalbuma;
    private javax.swing.JTextField txtalbumso;
    private javax.swing.JTextField txtartist;
    private javax.swing.JTextField txtartista;
    private javax.swing.JTextField txtartisto;
    private javax.swing.JTextField txtconcertso;
    private javax.swing.JTextField txtprice;
    private javax.swing.JTextField txtpricea;
    private javax.swing.JTextField txtsales;
    private javax.swing.JTextField txtsalesa;
    private javax.swing.JTextField txtsong;
    private javax.swing.JTextField txttracklist;
    // End of variables declaration//GEN-END:variables

    private void myConnection() throws SQLException {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        DefaultTableModel model2 = (DefaultTableModel) jTable3.getModel();
        
        model.setRowCount(0);
        model2.setRowCount(0);
        try {
            Class.forName(driverClassName);
        } catch (ClassNotFoundException ex) {
        }

        try {
            dbConnection = DriverManager.getConnection(url, username, passwd);
            statement = dbConnection.createStatement();
            String selectSongs = "SELECT * from selectallsongs()";

            result = statement.executeQuery(selectSongs);
            while (result.next()) {
                int id = result.getInt("id");
                String song = result.getString("song_name");
                String name = result.getString("artist_name");
                String album = result.getString("album_name");
                int sales = result.getInt("sales");
                double price = result.getDouble("price");
                Object[] row = {id, song, name, album, sales, price};
                model.addRow(row);
            }

            
            statement1 = dbConnection.createStatement();
            String selectalbums = "SELECT * from selectallalbums()";

            result = statement1.executeQuery(selectalbums);
            while (result.next()) {
                int id = result.getInt("id");
                String name = result.getString("artist_name");
                String album = result.getString("album_name");
                int tracklist = result.getInt("tracklist");
                int sales = result.getInt("sales");
                double price = result.getDouble("price");
                Object[] row = {id,name, album,tracklist, sales, price};
                model2.addRow(row);
            }
        } catch (SQLException ex) {
            System.out.println("\n -- SQL Exeception \n");
            while (ex != null) {
                System.out.println("Message: " + ex.getMessage());
                ex = ex.getNextException();
            }
        }

        
    

        statement.close();
        statement1.close();
        dbConnection.close();
    }
    static Connection dbConnection = null;
    static Statement statement = null;
    static Statement statement1 = null;
    static ResultSet result = null;

    private void close() {
        WindowEvent closeWindow = new WindowEvent(this, WindowEvent.WINDOW_CLOSING);
        Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(closeWindow);
    }

}
