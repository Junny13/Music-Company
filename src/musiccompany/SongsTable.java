/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package musiccompany;

import java.awt.Toolkit;
import java.awt.event.WindowEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import static musiccompany.AlbumsTable.dbConnection;
import static musiccompany.AlbumsTable.prestatement;
import static musiccompany.AlbumsTable.result;
import static musiccompany.AlbumsTable.statement;
import static musiccompany.Home.driverClassName;
import static musiccompany.Home.passwd;
import static musiccompany.Home.url;
import static musiccompany.Home.username;

/**
 *
 * @author giorgipc
 */

public class SongsTable extends javax.swing.JFrame {

    /**
     * Creates new form SongsFrame
     */
    String artistName;
    
    public SongsTable() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        searchBox3 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "song_name", "Sales", "Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Search Song:");

        jLabel2.setText("Songs");

        searchBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBox3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(searchBox3, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 758, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(361, 361, 361)
                            .addComponent(jLabel2))))
                .addContainerGap(37, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jLabel1)
                    .addComponent(searchBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 67, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable1MouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {                                         
            close();
            AlbumsTable at = null;
            try {
                at = new AlbumsTable();
            } catch (SQLException ex) {
                Logger.getLogger(SongsTable.class.getName()).log(Level.SEVERE, null, ex);
            }
            at.myConnection(artistName);
            at.setVisible(true);
        } catch (SQLException ex) {
            Logger.getLogger(SongsTable.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void searchBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBox3ActionPerformed
       DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);
        try{
            Class.forName(driverClassName);
        }catch (ClassNotFoundException ex) {}
        try{
            dbConnection = DriverManager.getConnection(url,username,passwd);
            String findSong = "SELECT * FROM findsong(?,?)";
            
            
            PreparedStatement prestatement = dbConnection.prepareStatement(findSong);
            String searchQuery = "%"+searchBox3.getText()+"%";
           
            prestatement.setString(1,artistName);
            prestatement.setString(2,searchQuery);
            result = prestatement.executeQuery();
            if(result.isBeforeFirst() == false) {
                System.out.println("There is not a song with this name.");
                JOptionPane.showMessageDialog(null, "There is not a song with this name.");
            }
                
              while(result.next()){
                artistName = result.getString("artist_name");
                String songName = result.getString("song_name");
                int sales = result.getInt("sales");
                int price = result.getInt("price");
                Object[] row = {songName, sales, price};
                model.addRow(row);
            }
            
        }catch (SQLException ex){
            System.out.println("\n -- SQL Exeception \n");
            while(ex != null){
                System.out.println("Message: " + ex.getMessage());
                ex = ex.getNextException();
            }                                     

        }
    }//GEN-LAST:event_searchBox3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SongsTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SongsTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SongsTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SongsTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SongsTable().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField searchBox3;
    // End of variables declaration//GEN-END:variables
public void myConnection(String albumName) throws SQLException {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        String albumTest = albumName;
        model.setRowCount(0);
        try{
            Class.forName(driverClassName);
        }catch (ClassNotFoundException ex) {}
        
        try{
            dbConnection = DriverManager.getConnection(url,username,passwd);
//            statement    = dbConnection.createStatement();
            String selectSongs = "SELECT * FROM selectSongs(?)";
            prestatement = dbConnection.prepareStatement(selectSongs);
            prestatement.setString(1, albumTest);
            result = prestatement.executeQuery();
            while(result.next()){
                artistName = result.getString("artist_name");
                String songName = result.getString("song_name");
                int sales = result.getInt("sales");
                int price = result.getInt("price");
                Object[] row = {songName, sales, price};
                model.addRow(row);
            }
            
        }catch (SQLException ex){
            System.out.println("\n -- SQL Exeception \n");
            while(ex != null){
                System.out.println("Message: " + ex.getMessage());
                ex = ex.getNextException();
            }
        }
    }

             
    static Connection dbConnection = null;
    static Statement statement = null;
    static ResultSet result = null;
    static PreparedStatement prestatement = null;
    
    private void close() {
        WindowEvent closeWindow = new WindowEvent(this, WindowEvent.WINDOW_CLOSING);
        Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(closeWindow);
    }
}



